void triplanar_OS_vs(
	in float4 iPosition : POSITION,					
	in float3 iNormal : NORMAL,			
	
	uniform float4x4 worldviewproj,	
	
	out float4 oPosition : POSITION,
	out float3 oNormal : TEXCOORD0,
	out float3 oPos : TEXCOORD1
	)
{	
	oPosition = mul(worldviewproj, iPosition);
	oNormal = normalize(iNormal);
	oPos = iPosition.xyz / iPosition.w;
}

void triplanar_OS_ps(
	in float3 iNormal : TEXCOORD0,
	in float4 iPos : TEXCOORD1,
	uniform   sampler2D mainTexture,
	out float4 oColour : COLOR
)
{	


	// Determine the blend weights for the 3 planar projections.  
	// iNormal is the vertex-interpolated normal vector.  
	float3 absNormal = abs( iNormal.xyz );   
	float3 blend_weights = absNormal;
	// Tighten up the blending zone:  
	
	// -> ORIGINAL : 
	//blend_weights = (blend_weights - 0.2) * 7; // => in original paper,
	// 	but I don't see how the *7 is supposed to change anything, 
	//	since there is a division by itself just after (see "Force weights to sum to 1.0").
	blend_weights = (blend_weights - 0.5);
	blend_weights = max(blend_weights, 0);

	// Force weights to sum to 1.0
	blend_weights /= (blend_weights.x + blend_weights.y + blend_weights.z ).xxx;

	// Now determine a color value for each of the 3  
	// projections, blend them, and store blended results
	float4 blended_color;
	float tex_scale = 0.2f;
	{  
		// Compute the UV coords for each of the 3 planar projections.  
		// tex_scale (default ~ 1.0) determines how big the textures appear.  
		
		// j'ai remplace v2f.wsCoord par oPos : je suppose que v2f.wsCoord signifie :
		// vertex-2-fragment : world space coordinate
		float2 coord1 = iPos.yz * tex_scale;  
		float2 coord2 = iPos.zx * tex_scale;  
		float2 coord3 = iPos.xy * tex_scale;  
		
		// This is where you would apply conditional displacement mapping.  
		//if (blend_weights.x > 0) coord1 = . . .  
		//if (blend_weights.y > 0) coord2 = . . .  
		//if (blend_weights.z > 0) coord3 = . . .  
		
		// Sample color maps for each projection, at those UV coords.  
		float4 col1 = tex2D(mainTexture, coord1); //* 0.01 + float4(1.0,0.0,0.0,1.0); // uncomment to see the blending in red/green/blue only
		float4 col2 = tex2D(mainTexture, coord2); //* 0.01 + float4(0.0,1.0,0.0,1.0);
		float4 col3 = tex2D(mainTexture, coord3); //* 0.01 + float4(0.0,0.0,1.0,1.0);

		// Finally, blend the results of the 3 planar projections.  
		blended_color = col1.xyzw * blend_weights.xxxx +  
						col2.xyzw * blend_weights.yyyy +  
						col3.xyzw * blend_weights.zzzz; 
		}  

	// (absNormal.yyyy*0.6 + 0.4 ) is to see better the 3D, like a completely fake double lighting (up and down).
	oColour = blended_color * (absNormal.yyyy*0.6 + 0.4 ) ;
}
