// Generic Shadow caster material (floating point shadowmap)
material Ogre/DepthShadowmap/Caster/Float
{
    technique
    {
        pass 
        {
            vertex_program_ref Ogre/DepthShadowmap/CasterVP
            {
            }
            fragment_program_ref Ogre/DepthShadowmap/CasterFP
            {
            }
        }
    }
}
 
// Basic materials which support shadows as a seperate scheme
material Ogre/DepthShadowmap/BasicTemplateMaterial
{
    // This technique supports dynamic shadows
    technique
    {
        // Base ambient pass
        pass Ambient
        {
            // base colours, not needed for rendering, but as information
            // to lighting pass categorisation routine
            ambient 1 1 1
            diffuse 0 0 0 
            specular 0 0 0 0 
            // Really basic vertex program
            vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
            {
            }
        }
        // Now do the lighting pass
        // NB we don't do decal texture here because this is repeated per light
        pass Lighting
        {
            // base colours, not needed for rendering, but as information
            // to lighting pass categorisation routine
            ambient 0 0 0 
 
            // do this for each light
            iteration once_per_light
 
            scene_blend add
 
            // Vertex program reference
            vertex_program_ref Ogre/DepthShadowmap/ReceiverVP
            {
            }
 
            // Fragment program
            fragment_program_ref Ogre/DepthShadowmap/ReceiverFP
            {
            }
 
            texture_unit
            {
                content_type shadow
                tex_address_mode clamp
                filtering none
            }
        }
 
        // Decal pass
        pass Decal
        {
            // base colours, not needed for rendering, but as information
            // to lighting pass categorisation routine
            lighting off
            // Really basic vertex program
            vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
            {
                param_named ambient float4 1 1 1 1
            }
            scene_blend modulate
 
            texture_unit
            {
                texture_alias MainTexture
                tex_address_mode clamp
            }
        }
    }
}

// CG Vertex shader definition
vertex_program MultiTexture_VS cg            
{
    // Look in this source file for shader code
    source MultiTexture.cg
    
    // Use this function for the vertex shader            
    entry_point main_multi_texture_vp    
    
    // Compile the shader to vs_1_1 format    
    profiles vs_2_0 arbvp1                 
 
    // This block saves us from manually setting parameters in code
    default_params                    
    {
        // Ogre will put the worldviewproj into our 'worldViewProj' parameter for us.
        param_named_auto worldviewproj worldviewproj_matrix        
        // Note that 'worldViewProj' is a parameter in the cg code.
        //param_named_auto texViewProj texture_viewproj_matrix
        //param_named_auto world world_matrix
    }
}

// CG Pixel shader definition
fragment_program MultiTexture_PS cg            
{
    // Look in this source file for shader code
    source MultiTexture.cg        
    
    // Use this function for the pixel shader    
    entry_point main_multi_texture_fp    
    
    // Compile to ps_1_1 format    
    profiles ps_2_0 fp30 //arbfp1   
    
    default_params                    
    {      
    param_named_auto cameraPosition  camera_position         
    }
}

material MultiTexture : Ogre/DepthShadowmap/BasicTemplateMaterial
{
        // Material has one technique
    technique                    
    {
        pass         //textures           
        {
                        // Make this pass use the vertex shader defined above
            vertex_program_ref MultiTexture_VS    
            {
            }
                        // Make this pass use the pixel shader defined above
            fragment_program_ref MultiTexture_PS    
            {
            }
            texture_unit
            {
                                // This pass will use this 2D texture as its input
//                texture smallTerrain.jpg 2d
                texture bigTerrain.png 2d 8
                tex_address_mode clamp
                filtering point linear point
            }
            texture_unit
            {
                content_type shadow
                tex_address_mode clamp
                filtering none
            }
        }
        
    }
    
}
